// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The Interface for the Sight service.

syntax = "proto3";

package sight.x.service.v1;

import "google/api/annotations.proto";
import "proto/sight.proto";
import "jspb/jspb.proto";

option (jspb.js_namespace) = "sight.x.proto";
option java_package = "com.google.googlex.cortex.sight.sightservice";
option use_java_stubby_library = true;

// This API manages Sight logs, their creation and access to them.
service SightService {
  // A test request to validate that the service is up.
  rpc Test(TestRequest) returns (TestResponse) {
    option (google.api.http) = {
      get: "/v1/test"
    };
  }

  // Creates a new Sight log.
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/v1/create"
      body: "*"
    };
  }

  // Finalizes a previously-created Sight log.
  rpc Finalize(FinalizeRequest) returns (FinalizeResponse) {
    option (google.api.http) = {
      post: "/v1/finalize"
      body: "*"
    };
  }

  // Returns the metadata that describes a previously created Sight log.
  rpc GetLogInfo(GetLogInfoRequest) returns (GetLogInfoResponse) {
    option (google.api.http) = {
      post: "/v1/logInfo"
      body: "*"
    };
  }

  // Returns the attributes that describe all the logs accessible to a given
  // user.
  rpc GetAccessibleLogAttributes(GetAccessibleLogAttributesRequest)
      returns (GetAccessibleLogAttributesResponse) {
    option (google.api.http) = {
      post: "/v1/getAccessibleLogsAttributes"
      body: "*"
    };
  }

  // Returns all the logs that match a given set of attributes.
  rpc SearchLogs(SearchLogsRequest) returns (SearchLogsResponse) {
    option (google.api.http) = {
      post: "/v1/searchLogs"
      body: "*"
    };
  }

  // Gets the names of all the attributes ever set within this log and all
  // their possible values.
  rpc GetAttributes(GetAttributesRequest) returns (GetAttributesResponse) {
    option (google.api.http) = {
      post: "/v1/getAttributes"
      body: "*"
    };
  }

  // Returns a segment of the log that matches some search pattern on the
  // attributes.
  rpc SearchByAttributes(SearchByAttributesRequest)
      returns (SearchByAttributesResponse) {
    option (google.api.http) = {
      post: "/v1/searchByAttributes"
      body: "*"
    };
  }

  // Returns a segment of the log that in a given range.
  rpc SearchByRange(SearchByRangeRequest) returns (SearchByRangeResponse) {
    option (google.api.http) = {
      post: "/v1/searchByRange"
      body: "*"
    };
  }
}

message TestRequest {}

message TestResponse {
  string val = 1;
}

// The format in which the log is stored.
enum LogFormat {
  LF_UNKNOWN = 0;

  // ColumnIO (go/columnio) in CNS.
  LF_COLUMNIO = 1;

  // Capacitor (go/capacitor) in CNS.
  LF_CAPACITOR = 2;

  // Spanner (go/spanner)
  LF_SPANNER = 3;
}

// Request message for SightService.Create.
message CreateRequest {
  // The format in which the log data is stored.
  LogFormat format = 1;

  // The path of the directory where log files are stored.
  string log_dir_path = 2;

  // The user or group that owns this log data.
  string log_owner = 3;

  // Meaningful label that describes the contents of the log to a human.
  string label = 4;

  // Attributes that describe this log.
  repeated sight.x.proto.Attribute attribute = 5;
}

// Response message for SightService.Create.
message CreateResponse {
  // The unique id of the created log.
  int64 id = 1;

  // The path prefix common to all the file(s) that hold the log.
  string path_prefix = 2;
}

// Request message for SightService.Finalize.
message FinalizeRequest {
  // The unique id of the log to be finalized.
  int64 id = 1;

  // The path prefix common to all the file(s) that hold the log.
  string path_prefix = 2;

  // The format in which the log data is stored.
  LogFormat format = 3;

  // The user or group that owns this log data.
  string log_owner = 4;
}

// Response message for SightService.Finalize.
message FinalizeResponse {}

// Request message for SightService.GetLogInfo.
message GetLogInfoRequest {
  // The unique id of the log.
  int64 id = 1;
}

// Response message for SightService.GetLogInfo.
message GetLogInfoResponse {
  // The format in which the log data is stored.
  LogFormat format = 1;

  // The path prefix common to all the file(s) that hold the log.
  string path_prefix = 2;

  // The user or group that owns this log data.
  string log_owner = 3;

  // Meaningful label that describes the contents of the log to a human.
  string label = 4;

  // Attributes that describe this log.
  repeated sight.x.proto.Attribute attribute = 5;
}

// Request message for SightService.GetAccessibleLogAttributes.
message GetAccessibleLogAttributesRequest {
  // The user or group that owns this log data.
  string log_owner = 1;
}

// All the values that a given key may be mapped to.
message AttributeValues {
  string key = 1;
  repeated string value = 2;
}

// Response message for SightService.GetAccessibleLogAttributes.
message GetAccessibleLogAttributesResponse {
  repeated AttributeValues attribute_values = 1;
}

// Request message for SightService.SearchLogs.
message SearchLogsRequest {
  // The user or group that owns this log data. Only logs with this owner
  // will be returned.
  string log_owner = 1;

  // Regular expression against which to match the label of the log, if the
  // label is not empty.
  string label_re = 2;

  // Attributes that describe the requested log. Only logs that have the
  // requested value for all the requested attributes are returned.
  repeated sight.x.proto.Attribute attribute = 3;
}

// Response message for SightService.SearchLogs.
message SearchLogsResponse {
  // Ids of all the matching logs.
  repeated int64 id = 1;

  // The format in which the log data is stored.
  LogFormat format = 2;

  // The path prefix common to all the file(s) that hold the log.
  string path_prefix = 3;

  // The user or group that owns this log data.
  string log_owner = 4;

  // Meaningful label that describes the contents of the log to a human.
  string label = 5;

  // Attributes that describe this log.
  repeated sight.x.proto.Attribute attribute = 6;
}

// Request message for SightService.GetAttributes.
message GetAttributesRequest {
  // The unique id of the log.
  int64 id = 1;
}

// Response message for SightService.GetAttributes.
message GetAttributesResponse {
  repeated AttributeValues attribute_values = 1;
}

// Request message for SightService.SearchByAttributes.
message SearchByAttributesRequest {
  // The unique id of the log.
  int64 id = 1;

  // The attributes on which to filter. Only log entries where all these
  // attributes have the specified value, and their containing log regions,
  // are returned.
  repeated sight.x.proto.Attribute attribute = 2;
}

// Response message for SightService.SearchByAttributes.
message SearchByAttributesResponse {
  // The fragment of the log that contains all the entries that match the
  // search or contain the matches.
  sight.x.proto.Log log = 1;
}

// Request message for SightService.SearchByRange.
message SearchByRangeRequest {
  // The unique id of the log.
  int64 id = 1;

  // The index of the starting point (exclusive) of the requested log region.
  int64 range_start_idx = 2;

  // The index of the ending point (exclusive) of the requested log region.
  int64 range_end_idx = 3;

  // The maximum depth of the returned entries within the above range. If not
  // specified, no maximum is used.
  int64 max_depth = 4;
}

// Response message for SightService.SearchByRange.
message SearchByRangeResponse {
  // The fragment of the log that contains all the entries within the requested
  // region.
  sight.x.proto.Log log = 1;
}
