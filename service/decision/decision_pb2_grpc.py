# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from service.decision import decision_pb2 as service_dot_decision_dot_decision__pb2


class SightServiceStub(object):
    """This API manages Sight logs, their creation and access to them.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Test = channel.unary_unary(
                '/sight.x.service.decision.SightService/Test',
                request_serializer=service_dot_decision_dot_decision__pb2.TestRequest.SerializeToString,
                response_deserializer=service_dot_decision_dot_decision__pb2.TestResponse.FromString,
                )
        self.Create = channel.unary_unary(
                '/sight.x.service.decision.SightService/Create',
                request_serializer=service_dot_decision_dot_decision__pb2.CreateRequest.SerializeToString,
                response_deserializer=service_dot_decision_dot_decision__pb2.CreateResponse.FromString,
                )
        self.Launch = channel.unary_unary(
                '/sight.x.service.decision.SightService/Launch',
                request_serializer=service_dot_decision_dot_decision__pb2.LaunchRequest.SerializeToString,
                response_deserializer=service_dot_decision_dot_decision__pb2.LaunchResponse.FromString,
                )
        self.DecisionPointMethod = channel.unary_unary(
                '/sight.x.service.decision.SightService/DecisionPointMethod',
                request_serializer=service_dot_decision_dot_decision__pb2.DecisionPointRequest.SerializeToString,
                response_deserializer=service_dot_decision_dot_decision__pb2.DecisionPointResponse.FromString,
                )
        self.DecisionOutcomeMethod = channel.unary_unary(
                '/sight.x.service.decision.SightService/DecisionOutcomeMethod',
                request_serializer=service_dot_decision_dot_decision__pb2.DecisionOutcomeRequest.SerializeToString,
                response_deserializer=service_dot_decision_dot_decision__pb2.DecisionOutcomeResponse.FromString,
                )


class SightServiceServicer(object):
    """This API manages Sight logs, their creation and access to them.
    """

    def Test(self, request, context):
        """A test request to validate that the service is up.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Creates a new Sight log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Launch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecisionPointMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecisionOutcomeMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SightServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=service_dot_decision_dot_decision__pb2.TestRequest.FromString,
                    response_serializer=service_dot_decision_dot_decision__pb2.TestResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=service_dot_decision_dot_decision__pb2.CreateRequest.FromString,
                    response_serializer=service_dot_decision_dot_decision__pb2.CreateResponse.SerializeToString,
            ),
            'Launch': grpc.unary_unary_rpc_method_handler(
                    servicer.Launch,
                    request_deserializer=service_dot_decision_dot_decision__pb2.LaunchRequest.FromString,
                    response_serializer=service_dot_decision_dot_decision__pb2.LaunchResponse.SerializeToString,
            ),
            'DecisionPointMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.DecisionPointMethod,
                    request_deserializer=service_dot_decision_dot_decision__pb2.DecisionPointRequest.FromString,
                    response_serializer=service_dot_decision_dot_decision__pb2.DecisionPointResponse.SerializeToString,
            ),
            'DecisionOutcomeMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.DecisionOutcomeMethod,
                    request_deserializer=service_dot_decision_dot_decision__pb2.DecisionOutcomeRequest.FromString,
                    response_serializer=service_dot_decision_dot_decision__pb2.DecisionOutcomeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sight.x.service.decision.SightService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SightService(object):
    """This API manages Sight logs, their creation and access to them.
    """

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sight.x.service.decision.SightService/Test',
            service_dot_decision_dot_decision__pb2.TestRequest.SerializeToString,
            service_dot_decision_dot_decision__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sight.x.service.decision.SightService/Create',
            service_dot_decision_dot_decision__pb2.CreateRequest.SerializeToString,
            service_dot_decision_dot_decision__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Launch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sight.x.service.decision.SightService/Launch',
            service_dot_decision_dot_decision__pb2.LaunchRequest.SerializeToString,
            service_dot_decision_dot_decision__pb2.LaunchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecisionPointMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sight.x.service.decision.SightService/DecisionPointMethod',
            service_dot_decision_dot_decision__pb2.DecisionPointRequest.SerializeToString,
            service_dot_decision_dot_decision__pb2.DecisionPointResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecisionOutcomeMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sight.x.service.decision.SightService/DecisionOutcomeMethod',
            service_dot_decision_dot_decision__pb2.DecisionOutcomeRequest.SerializeToString,
            service_dot_decision_dot_decision__pb2.DecisionOutcomeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
