// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The Interface for the Sight service.

syntax = "proto3";

package sight.x.service.decision;
import "sight/proto/sight.proto";

// This API manages Sight logs, their creation and access to them.
service SightService {
  
  // A test request to validate that the service is up.
  rpc Test(TestRequest) returns (TestResponse) {}

  // Creates a new Sight log.
  rpc Create(CreateRequest) returns (CreateResponse) {}

  rpc Launch(LaunchRequest) returns (LaunchResponse) {}

  rpc DecisionPointMethod(DecisionPointRequest) returns (DecisionPointResponse) {}

  rpc DecisionOutcomeMethod(DecisionOutcomeRequest) returns (DecisionOutcomeResponse) {}
}

enum OptimizerType {
  OT_UNKNOWN = 0;
  OT_VIZIER = 1;
  OT_ACME = 2;
}

message DecisionPointRequest{
  string client_id = 1;
  string worker_id = 2;
  int64 suggestion_count = 3;
  sight.x.proto.DecisionPoint decision_point = 4;
  OptimizerType optimizer_type = 5;
}

message DecisionPointResponse{
  map<string,float> actions = 1;
}

message DecisionOutcomeRequest{
  sight.x.proto.DecisionOutcome decision_outcome = 1;
  string client_id = 3;
  string worker_id = 4;
  float last_reward = 5;
  OptimizerType optimizer_type = 6;
  bool last_call = 7;
}

message DecisionOutcomeResponse{
  string response_str = 1;
}

message LaunchRequest{
  sight.x.proto.DecisionConfigurationStart decision_config_params = 1;
  OptimizerType optimizer_type = 2;
  string label = 3;
  string client_id = 4;
}

message LaunchResponse {
  string display_string = 1;
}

message TestRequest {}

message TestResponse {
  string val = 1;
}

// The format in which the log is stored.
enum LogFormat {
  LF_UNKNOWN = 0;

  // ColumnIO (go/columnio) in CNS.
  LF_COLUMNIO = 1;

  // Capacitor (go/capacitor) in CNS.
  LF_CAPACITOR = 2;

  // Spanner (go/spanner)
  LF_SPANNER = 3;

  // AVRO
  LF_AVRO = 4;
}

// Request message for SightService.Create.
message CreateRequest {
  // The format in which the log data is stored.
  LogFormat format = 1;

  // The path of the directory where log files are stored.
  string log_dir_path = 2;

  // The user or group that owns this log data.
  string log_owner = 3;

  // Meaningful label that describes the contents of the log to a human.
  string label = 4;

  // Attributes that describe this log.
  repeated sight.x.proto.Attribute attribute = 5;
}

// Response message for SightService.Create.
message CreateResponse {
  // The unique id of the created log.
  int64 id = 1;

  // The path prefix common to all the file(s) that hold the log.
  string path_prefix = 2;
}
